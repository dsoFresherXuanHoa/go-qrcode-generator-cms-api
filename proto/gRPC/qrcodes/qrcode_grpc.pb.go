// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/qrcode.proto

package qrcodes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QRCodeService_GrpcCreateQRCode_FullMethodName = "/qrcodes.QRCodeService/GrpcCreateQRCode"
)

// QRCodeServiceClient is the client API for QRCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QRCodeServiceClient interface {
	GrpcCreateQRCode(ctx context.Context, in *CreateQRCodeRequest, opts ...grpc.CallOption) (*CreateQRCodeResponse, error)
}

type qRCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQRCodeServiceClient(cc grpc.ClientConnInterface) QRCodeServiceClient {
	return &qRCodeServiceClient{cc}
}

func (c *qRCodeServiceClient) GrpcCreateQRCode(ctx context.Context, in *CreateQRCodeRequest, opts ...grpc.CallOption) (*CreateQRCodeResponse, error) {
	out := new(CreateQRCodeResponse)
	err := c.cc.Invoke(ctx, QRCodeService_GrpcCreateQRCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QRCodeServiceServer is the server API for QRCodeService service.
// All implementations must embed UnimplementedQRCodeServiceServer
// for forward compatibility
type QRCodeServiceServer interface {
	GrpcCreateQRCode(context.Context, *CreateQRCodeRequest) (*CreateQRCodeResponse, error)
	mustEmbedUnimplementedQRCodeServiceServer()
}

// UnimplementedQRCodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQRCodeServiceServer struct {
}

func (UnimplementedQRCodeServiceServer) GrpcCreateQRCode(context.Context, *CreateQRCodeRequest) (*CreateQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrpcCreateQRCode not implemented")
}
func (UnimplementedQRCodeServiceServer) mustEmbedUnimplementedQRCodeServiceServer() {}

// UnsafeQRCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QRCodeServiceServer will
// result in compilation errors.
type UnsafeQRCodeServiceServer interface {
	mustEmbedUnimplementedQRCodeServiceServer()
}

func RegisterQRCodeServiceServer(s grpc.ServiceRegistrar, srv QRCodeServiceServer) {
	s.RegisterService(&QRCodeService_ServiceDesc, srv)
}

func _QRCodeService_GrpcCreateQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QRCodeServiceServer).GrpcCreateQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QRCodeService_GrpcCreateQRCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QRCodeServiceServer).GrpcCreateQRCode(ctx, req.(*CreateQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QRCodeService_ServiceDesc is the grpc.ServiceDesc for QRCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QRCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrcodes.QRCodeService",
	HandlerType: (*QRCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrpcCreateQRCode",
			Handler:    _QRCodeService_GrpcCreateQRCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/qrcode.proto",
}
